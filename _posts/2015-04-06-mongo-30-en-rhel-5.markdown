---
layout: post
title: "Mongo 3.0 en RHEL 5 (+Python)"
date: 2015-04-06 04:35:40
author: rafa_aguilar
published: true
categories: entradas
comments: true
---

#Configuración base del servidor
En este apartado conseguiremos todos los pasos previos necesarios para poder usar MongoDB 3.0 en nuestro servidor

<div markdown="0"><a href="#" class="btn btn-info">Nota</a></div>

Este artículo está basado en la documentación oficial de MongoDB que podrás conseguir dando click [acá][mongo_rhel].  Está probado en un servidor RHEL 5.2 de 64 bits.
{: .notice}

<div markdown="0"><a href="#" class="btn btn-danger">Peligro</a></div>

Para ejecutar las instrucciones de esta guía se deben tener permisos de *SuperUsuario* o *root*, avanzar con cuidado en cada paso, cualquier paso en falso puede llevar a un sistema inestable.En caso de no necesitar permisos de *root*, se especificará, de lo contrario deberá tenerlo.
{: .notice}

##Añadiendo repositorios de MongoDB a YUM
Con esto podremos asegurarnos en tener las ultima versión disponible, asgurando estabilidad y seguridad:

1. Primero creamos el directorio para agregar repositorios (*en dado caso que no la tengamos ya*):\\
{% highlight bash %}
mkdir /etc/yum.repos.d/
{% endhighlight %}

2. Creamos y editamos el archivo `mongodb-org-3.0.repo`:\\
{% highlight bash  %}
nano /etc/yum.repos.d/mongodb-org-3.0.repo
{% endhighlight %}

3. Añadimos lo siguiente al archivo creado en el paso anterior:\\
{% highlight bash %}
[mongodb-org-3.0]
name=MongoDB Repository
baseurl=http://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/
gpgcheck=0
enabled=1
{% endhighlight %}

<div markdown="0"><a href="#" class="btn btn-warning">Importante</a></div>

_Si desea instalar alguna otra versión de MongoDB debe usar un repositorio distinto cambiando el *baseurl*, para más información de click [acá][mongo_yum]._
{: .notice}


##Instalando MongoDB y otras herramientas

 - Para instalar la última versión disponible de MongoDB podemos ejecutar el siguiente comando:\\
{% highlight bash   %}
yum install -y mongodb-org
{% endhighlight %}

 - Para instalar un *release* específico debe especificar cada paquete agregando la versión al nombre del paquete, por ejemplo:\\
{% highlight bash   %}
sudo yum install -y mongodb-org-3.0.1 mongodb-org-server-3.0.1 mongodb-org-shell-3.0.1 mongodb-org-mongos-3.0.1 mongodb-org-tools-3.0.1
{% endhighlight %}


##Habilitando puerto de MongoDB en SELinux

<div markdown="0"><a href="#" class="btn btn-info">Info</a></div>
_Solo es necesario si tu servidor usa SELinux, no aplica para toodos los casos. Aunque siempre es aconsejable tener habilitado un gestor de accesos como SELinux._
{: .notice}

SELinux es una implementación de una arquitectura de control de acceso obligatoria y flexible para el Kernel Linux, básicamente permite definir las políticas en espacios de usuario y aplicarlas a nivel del Kernel, entonces sólo permitiremos que deje *hablar* por el puerto `27017`, puerto que usa por defecto MongoDB, con el protocolo `tcp`:
{% highlight bash   %}
semanage port -a -t mongod_port_t -p tcp 27017
{% endhighlight %}

_También existen otras maneras de otorgar la permisología a MongoDB, pero no son tan seguras. Si te interesa da click [acá][mongo_selinux]._
{: .notice}

#Gestionando MongoDB
Al tener MongoDB instalado por nuestro sistema de paquetería nos trae ciertas ventajas en comparación con una instalación *Stand-Alone*, como tener configurado como servicio el demonio de MongoDB, que es `mongod` (_intuitivo_),  además que ya trae las rutas de donde guardar los datos y los log's por ejemplo.

<div markdown="0"><a href="#" class="btn btn-info">Info</a></div>
_Como todos los pasos previos fueron dejando las opciones por defecto, los comandos para ejecutar son basadas en dichas configuraciones, sin embargo una instalación en productivo seguro requerirá modificaciones más avanzadas, así que si realizas otras modificaciones asegurate de leer bien el [Manual de MongoDB][mongo_rhel] para ajustar los cambios necesarios._
{: .notice}

##Iniciando MongoDB
Ya sólo queda iniciar nuestro servicio de MongoDB ejecutando el siguiente comando:
{% highlight bash   %}
service mongod start
{% endhighlight %}

Debería salir algo como esto:
{% highlight bash   %}
Starting mongod:                                           [  OK  ]
{% endhighlight %}

Pero verifiquemos un poco más, vamos a revisar el log del servicio para asegurar que arrancó sin problemas con el siguiente comando:
{% highlight bash   %}
tail /var/log/mongodb/mongod.log
{% endhighlight %}

Debería aparecer algo como esto en la última línea:
{% highlight bash   %}
2015-04-06T06:49:21.417-0430 I NETWORK  [initandlisten] waiting for connections on port 27017
{% endhighlight %}

Si es así, tenemos corriendo MongoDB exitosamente! :D

##Deteniendo y Reiniciando MongoDB

Los comandos análogos para detener y reiniciar el servicio son:
{% highlight bash %}
#Para detener
service mongod stop

#Para reiniciar
service mongod restart
{% endhighlight %}

#Instalando PyMongo 3.0rc1 (Python Driver para MongoDB 3.0)
Luego de desplegar Python, por el [método que prefieras][install_python], debes instalar los *bindings* para MongoDB, en este caso se llaman [PyMongo][pymongo] naturalmente.  Hay varias maneras de hacerlo, seguramente puedes buscarlo por YUM, pip ó easy_install (los últimos dos son gestores de paquetes de Python), sin embargo puede que te instalen la versión 2.8 ya que es la estable (para la fecha de esta entrada), pero esto puede generar algunos problemas con librerías, aplicaciones o frameworks que estén diseñados para MongoDB 3.0, como [Bottle][bottle], el cual me dió dolores de cabeza y me llevó a esta [guía][pymongo_3], pero en resumen puedes ejecutar este comando:
{% highlight bash %}
easy_install https://github.com/mongodb/mongo-python-driver/archive/3.0rc1.tar.gz
{% endhighlight %}

Y ya con entrar a una consola de Python (como usuario regular) verificar que tienes instalado PyMongo correctamente:
{% highlight bash %}
#Primero abrimos la consola de Python
python
#Luego dentro de la consola ya importamos la librería
>>>import pymongo
{% endhighlight %}


Si el último comando no arroja absolutamente nada, pues es que estamos bien, pero para chequear concretamente la versión que está utilizando nuestro intérprete podemos correr este comando en una cónsola Python:
{% highlight python %}
>>>import pip; ["%s==%s" % (i.key, i.version) for i in pip.get_installed_distributions() if i.key=='pymongo']
#Debería aparecer algo como esto:
['pymongo==3.0rc1']
{% endhighlight %}

Y bueno, solo queda disfrutar de esta grandiosa BD no-relacional, de la cual estaremos habla en próximas entregas.


[mongo_rhel]:http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat/
[mongo_yum]:http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat/#configure-the-package-management-system-yum
[mongo_selinux]:http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat/#run-mongodb
[install_python]:/en-construccion.html
[pymongo]:https://api.mongodb.org/python/current/
[bottle]:http://bottlepy.org/docs/dev/index.html
[pymongo_3]:http://api.mongodb.org/python/current/installation.html#installing-a-beta-or-release-candidate
{% include _toc.html %}
